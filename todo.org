* TODO Net should be able to read/parse standard URLs
* DONE Query tracker
  CLOSED: [2018-12-02 sø. 19:21]
* DONE Add port to http_get
  CLOSED: [2018-12-02 sø. 19:21]
* TODO Bencoded dicts must always have the keys in alpha order
* TODO Apparently .torrent files can contain a "signatures" key too, see http://bittorrent.org/beps/bep_0035.html
* TODO Swap openssl sha1 to libcrypto++ (modern C++) ?
* TODO Scraping

* TODO Peer wire protocol
** Need to at least maintain four booleans, 'choking' and 'interested' both ways
** Peer handshake
*** <pstrlen><pstr><reserved><info_hash><peer_id>
* It would be nice to automate testing. For that I optimally need:
** Create a torrent using cli:
*** It seems that ctorrent can do that: ctorrent -t -u "http://localhost:8000/announce" -s test.torrent file
** Launch a cli tracker
*** Seems that https://github.com/webtorrent/bittorrent-tracker might work (npm install -g bittorrent-tracker)
** Seed the file with 1..N clients with different amount of data

* Building on MacOS can now be done by:
** brew install llvm
** replace stdc++fs in CMakeList.txt files with c++fs
** create default conan profile with clang8
** then same procedure as on linux

* Retry or timeout pieces/blocks we never got
* Disconnect peers that have not sent KeepAlive in a while.
* Handle http 301 (permanently moved) for torrents. Like here: http://www.publicdomaintorrents.info/nshowmovie.html?movieid=1066

* DONE Handle multi file torrents, they are currently dumped to a single file. Maybe just separate the blob to files when done (instead of removing suffix).
* "Connect failed: Connection refused" should prefix with ip

* http://tracker.etree.org:6969/announce?info_hash=%7Bs%AD%1C%F1%D4%2B%00%F2%D7QW%87%F5%DD%22r%15%BDC&peer_id=abcdefghijklmnopqrst&port=20001&uploaded=0&downloaded=0&left=470589861&event=started&compact=1 works in browser but return 404 by client. See files here: https://bt.etree.org/index.php?sort=seeders

* "Filename exists but does not match all pieces", instead of having to restart from 0, nuke bad pieces?

* Should connect to tracker again with the specified interval, and cleanup list of 
  peers, killing of the ones that never connected and eventually connect to new
  that we are not already connected to.

* Currently we only try the tracker in the "announce" field. But we also have the
  "announce-list" which is currently not looked at. We should.

* DONE Keep seeding, with ctrl-C to stop.

* When low on disk we seem to cause ood issues even if we have pre-allocated the file,
  should investigate. In addition when we cannot write pieces to disk we keep accumulating
  them in the FileWriter causing large memory usage. There should be a limit where we stop
  and choke until the FileWriter can resume moving pieces to disk. It could be a configurable max amount of bytes in queue.

* Accessing Booker torrent we can't parse the response from the tracker, based on wireshark
  it seems like this is a HTTP chunked response where the "Chunk size" 3736350D0A (76e..)
  preceeds the real data. This is currently included in our parsed data. This should be
  indicated by the "Transfer-Encoding: chunked" header.
  * Chunked encoding implemented, but the response does not seem bencoded but json? Further investigation needed.

* Reseeding multi torrent fails with: "exception: filesystem error: cannot get file size: Is a directory",
  it would probably fail to keep seeding it as well due to the split operation.

* Pieces marked for retry could be printed on a single line to reduce spam.

* Check multi torrent seeding. Need upload test.

* Seems like we contact a lot of peers even when starting up with a finished torrent,
  that is probably unnecessary. Should just wait for others to contact us.

* Can reduce spam in printing verbose tracker url when starting up.
