* TODO Net should be able to read/parse standard URLs
* DONE Query tracker
  CLOSED: [2018-12-02 sø. 19:21]
* DONE Add port to http_get
  CLOSED: [2018-12-02 sø. 19:21]
* TODO Bencoded dicts must always have the keys in alpha order
* TODO Apparently .torrent files can contain a "signatures" key too, see http://bittorrent.org/beps/bep_0035.html
* TODO Swap openssl sha1 to libcrypto++ (modern C++) ?
* TODO Scraping

* TODO Peer wire protocol
** Need to at least maintain four booleans, 'choking' and 'interested' both ways
** Peer handshake
*** <pstrlen><pstr><reserved><info_hash><peer_id>
* It would be nice to automate testing. For that I optimally need:
** Create a torrent using cli:
*** It seems that ctorrent can do that: ctorrent -t -u "http://localhost:8000/announce" -s test.torrent file
** Launch a cli tracker
*** Seems that https://github.com/webtorrent/bittorrent-tracker might work (npm install -g bittorrent-tracker)
** Seed the file with 1..N clients with different amount of data

* Building on MacOS can now be done by:
** brew install llvm
** replace stdc++fs in CMakeList.txt files with c++fs
** create default conan profile with clang8
** then same procedure as on linux

* Retry or timeout pieces/blocks we never got
* Disconnect peers that have not sent KeepAlive in a while.
* Handle http 301 (permanently moved) for torrents. Like here: http://www.publicdomaintorrents.info/nshowmovie.html?movieid=1066

* Handle multi file torrents, they are currently dumped to a single file. Maybe just separate the blob to files when done (instead of removing suffix).
* "Connect failed: Connection refused" should prefix with ip

* http://tracker.etree.org:6969/announce?info_hash=%7Bs%AD%1C%F1%D4%2B%00%F2%D7QW%87%F5%DD%22r%15%BDC&peer_id=abcdefghijklmnopqrst&port=20001&uploaded=0&downloaded=0&left=470589861&event=started&compact=1 works in browser but return 404 by client. See files here: https://bt.etree.org/index.php?sort=seeders